#Experiment
# Anna Caprita, Deborah Gut, Leonie Orlikowski, Christin Sobotta, Mette Trettin

import os
import glob
from psychopy import gui, core, visual, event
import random
import pandas as pd

# Experimentkonfiguration
img_dir = os.getcwd() + '/Stimuli/Spinnenbilder/'     #hier eigene Ordnerstruktur einfügen und Bilder in diesem Ordner gespeichert haben
img_list = glob.glob(img_dir + '*.jpg')

neutral_img_dir = os.getcwd() + '/Stimuli/Neutrale_Bilder/'    #Bilder verändern im Ordner, eigene Ordnerstruktur einfügen
neutral_list = glob.glob(neutral_img_dir + '*.jpg')

train_img_dir = os.getcwd() + '/Stimuli/Trainingsbilder/'      #hier ebensfalls eigene Ordnerstruktur einfügen (wie oben)
train_list = glob.glob(train_img_dir + '*.jpg')    #train_img_list
#train_list = os.listdir(train_img_dir)

max_train_trials = len(train_list)
max_trials = len(img_list)
# max_blocks = 2   #Zahl verändern
block_num_1 = 1   #Zahl verändern
block_num_2 = 1   #Zahl verändern
trial_num = 5   #Zahl verändern
trial_num_test_block = 5    #Zahl verändern ->

# Fenster erstellen
win = visual.Window(
    size=[1280, 853],
    fullscr=True,
    color = 'white'
)

# Supervisor input
supervisor_input = gui.Dlg(title='Probanden-Daten', pos=(0, 0))
supervisor_input.addText('Bitte folgende Daten von Versuchsperson erfragen:')
supervisor_input.addField('Probanden-ID:')
supervisor_input.addField('Alter:')
supervisor_input.addField('Brillenträger:', choices=['Ja', 'Nein'])
supervisor_input.addField('Testleiter:', choices=['AC', 'CS', 'DG', 'LO', 'MT'])
supervisor_input.addField('Geschlecht:', choices=['männlich', 'weiblich', 'divers'])
supervisor_input.show()

# Eingabe der Daten und Speicherung in subject data file
if supervisor_input.OK:
    participant_id = supervisor_input.data[0]
    age = supervisor_input.data[1]
    glasses = supervisor_input.data[2]
    testleiter = supervisor_input.data[3]
    geschlecht = supervisor_input.data[4]

    # Dateipfad modifizieren
    subject_file_path = os.getcwd() + '/Daten/subject_' + participant_id + '.tsv'

    # Datei für VP-Daten erstellen/laden
    if os.path.isfile(subject_file_path):
        subject_data = pd.read_csv(subject_file_path, delimiter='\t')
    else:
        subject_data = pd.DataFrame({'sub_id': [],
                                     'age': [],
                                     'sex': [],
                                     'glasses': [],
                                     'block': [],
                                     'trial': [],
                                     'reaction_time': [],
                                     'accuracy': [],
                                     'orientation': []})

    # Antworten sammeln und zu subject data hinzufügen
    def collect_responses(sub_id, 
                          age,
                          sex, 
                          glasses,
                          block, 
                          trial, 
                          reaction_time, 
                          accuracy, 
                          key_pressed, 
                          orientation):
        trial_column = pd.DataFrame({'sub_id': [sub_id],
                                     'age': [age],
                                     'sex': [sex],
                                     'glasses': [glasses],
                                     'block': [block],
                                     'trial': [trial],
                                     'reaction_time': [reaction_time],
                                     'accuracy': [accuracy],
                                     'key_pressed': [key_pressed],
                                     'orientation': [orientation]})     #brauchen wir orientation?
        return trial_column
   
    # Beispieldaten   
    sub_id = 2
    block = 1
    trial = 1
    reaction_time = 0.5
    accuracy = True
    key_pressed = 'A'
    orientation = 180

    trial_data = collect_responses(participant_id, 
                                   age, 
                                   geschlecht, 
                                   glasses, 
                                   block, 
                                   trial, 
                                   reaction_time, 
                                   accuracy,
                                   key_pressed, 
                                   orientation)
    subject_data = pd.concat([subject_data, trial_data], 
                             ignore_index=True)

    # Daten nach Block und trial sortieren
    subject_data = subject_data.sort_values(['block', 'trial']).reset_index(drop=True)

    # subject data in individuelles file speichern
    subject_data.to_csv(subject_file_path, sep='\t', index=False, float_format='%.3f')

    # subject data aus individuellem file laden
    loaded_data = pd.read_csv(subject_file_path, delimiter='\t')

    # Drucken der geladenen Daten
    print(loaded_data)

else:
    print("Supervisor input canceled.")

#Instruktionen
instructions = {
    'instructions_1': 'Willkommen zu unserem Experiment. \n\n'
                     'Dieses Experiment findet im Rahmen des Experimentalpraktikums '
                     'des B.Sc. Psychologie an der Universität Magdeburg statt. \n\n'
                     'Bitte drücken Sie die Leertaste, um zu beginnen.',
    'instructions_2': 'In diesem Experiment werden Sie nach "L"s suchen.\n\n'
                      'In jedem Durchgang werden mehrere Buchstaben auf dem Display erscheinen.\n\n'
                      'Einer davon wird ein "L" sein, bei den anderen handelt es sich um "T"s.\n\n'
                      'Das L ist dabei entweder nach links oder nach rechts gedreht. \n\n'
                      'Sobald Sie das "L" finden, drücken Sie bitte so schnell wie möglich auf die Pfeiltaste, die mit der Richtung des "L"s übereinstimmt.\n\n'
                      'Wenn der waagerechte Balken also nach rechts zeigt, drücken Sie bitte die rechte Pfeiltaste. \n\n'
                      'Wenn der waagerechte Balken also nach links zeigt, drücken Sie bitte die linke Pfeiltaste. \n\n'
                      'Das Ziel ist es, das "L" so schnell wie möglich zu finden.'
                      'Wenn Sie das "L" nach 10 Sekunden nicht gefunden haben, werden Sie automatisch zum nächsten Bildschirm weitergeleitet. \n\n'  #Zeit ändern?
                      'Zwischen den einzelnen Blöcken können Sie eine kurze Pause machen.\n\n'
                      'Bitte drücken Sie die Leertaste, um fortzufahren.',
    'instructions_3': 'Das Experiment besteht aus 10 Blöcken mit jeweils 20 Trials.\n\n'         #Zahlen ändern
                        'Zusätzlich werden zu Beginn einige Probedurchgänge durchgeführt.\n\n'
                        'Insgesamt dauert das Experiment ungefähr 20 Minuten.',                   #Zeit?
    'instructions_4': 'Falls Sie noch Fragen haben, wenden Sie sich gerne jetzt an die Versuchsleitung. '
                      'Sie haben jederzeit die Möglichkeit, das Experiment abzubrechen.\n\n'
                      'Viel Erfolg!\n\n'
                      'Bitte drücken Sie die Leertaste, um mit den Probedurchgängen zu beginnen.',
}

# experiment functions
def present_text(window_instance,
                 instr_text=':-)', #wird angezeigt, wenn kein anderer Text angegeben ist
                 text_size=0.075,
                 text_position=(0., 0.),
                 color = 'black',
                 unit='norm',
                 continue_key='space'):
    
    text_stim = visual.TextStim(window_instance, 
                                height=text_size, 
                                color=color,
                                units=unit, 
                                pos=text_position)
    text_stim.setText(instr_text)
    text_stim.draw()
    window_instance.flip()
    event.waitKeys(keyList=[continue_key])

    #while True:                                                    #weiß nich genau was das ist?
     #   keys = event.getKeys(keyList=[continue_key, "escape"])
      #  if continue_key in keys:
       #     break
        #elif "escape" in keys:
         #   core.quit()

    return None

# present_text(instructions)

# Fixationskreuz definieren
def draw_fixation(window_instance,
                  fixation_position=(0., 0.)):
    
    fixation = visual.ShapeStim(window_instance,
                                pos=fixation_position,
                                vertices=((0, -0.1), (0, 0.1), (0,0), (-0.065,0), (0.065, 0)),
                                lineWidth=3,
                                closeShape=False,
                                lineColor='black')
    fixation.draw()
    window_instance.update()
    core.wait(1.0)

    return None

# draw_fixation(win)

#Bilder präsentieren
def present_img(window_instance,
                img_input,
                image_position=(0., 0.),
                #training=False,
                continue_key='space'):
    
   # if training == True:
    #    orientation = 0.0
    #else:
     #   orientation = 180.0
    
    image_stim = visual.ImageStim(window_instance,
                                  image=img_input,
                                  #ori=orientation,
                                  pos=image_position)
    image_stim.draw()
    window_instance.flip()  
    core.wait(1.0) 
    #event.waitKeys(keyList=[continue_key])
    
    return None

def Suchdisplay(window_instance):
    # Stimuli erstellen
    target_stimulus = visual.TextStim(window_instance, 
                                      text="L", 
                                      color="black", 
                                      ori=0, 
                                      flipHoriz=random.choice([True, False]), 
                                      units='pix',
                                      height=30)
    distractor_stimulus = visual.TextStim(window_instance, 
                                          text="T", 
                                          color="black", 
                                          units='pix',
                                          height=30)

    # Positionen der Stimuli definieren -> Positionen selbst festlegen
    randomlist = [
        (100, 0), (-100, 0), (0, 100), (0, -100), (70.71, 70.71), (-70.71, 70.71),
        (70.71, -70.71), (-70.71, -70.71), (200, 0), (173.2, 100), (100, 173.2),
        (0, 200), (-100, 173.2), (-173.2, 100), (-200, 0), (-173.2, -100),
        (-100, -173.2), (0, -200), (100, -173.2), (173.2, -100), (300, 0),
        (259.8, 150), (150, 259.8), (0, 300), (-150, 259.8), (-259.8, 150),
        (-300, 0), (-259.8, -150), (-150, -259.8), (0, -300), (150, -259.8),
        (259.8, -150), (400, 0), (346.41, 200), (200, 346.41), (0, 400),
        (-200, 346.41), (-346.41, 200), (-400, 0), (-346.41, -200),
        (-200, -346.41), (0, -400), (200, -346.41), (346.41, -200)
    ]

    # Jitter-Parameter für x- und y-Achse
    jitter_amount = 20

    # Zufällige Position für das Zielstimulus auswählen
    random.shuffle(randomlist)
    target_position = randomlist.pop()

    # Anzahl der zu zeigenden Distraktoren pro Durchlauf
    num_distractors = len(randomlist) // 2

    # Zufällige Distraktoren auswählen
    random_distractors = random.sample(randomlist, num_distractors)

    # Stimuli anzeigen
    for position in random_distractors:
        x, y = position
        jitter_x = random.uniform(-jitter_amount, jitter_amount)
        jitter_y = random.uniform(-jitter_amount, jitter_amount)
        x += jitter_x
        y += jitter_y
        distractor_stimulus.pos = (x, y)
        distractor_stimulus.draw()

    print(target_position)
    target_stimulus.pos = target_position
    target_stimulus.draw()

    window_instance.flip()

    # Auf Tastendruck warten
    response = event.waitKeys(keyList=["left", "right"])  # "left" und "right" ersetzen durch die tatsächlichen Pfeiltasten

    # Ergebnis auswerten
    if response and response[0] == "left":
        print("Richtig! Sie haben das 'L' nach links gefunden.")
    elif response and response[0] == "right":
        print("Richtig! Sie haben das 'L' nach rechts gefunden.")
    else:
        print("Falsch! Das 'L' wurde nicht gefunden.")

    return None

# Aufruf der Funktion
# Suchdisplay()

#ITI definieren
def present_ITI(window_instance,  #ITI=Inter-Trial-Interval (Zeit zwischen zwei Trials)
                duration=0.5): #Dauer können wir noch überdenken
    window_instance.update()
    core.wait(duration)
    
    return None

# Funktion für Probedurchgänge
def practice_trials(win, 
                    train_list):
    for training_trial in train_list:
        draw_fixation(window_instance=win)
        present_img(window_instance=win, 
                    img_input=training_trial, 
                    # training=True
                    )
        Suchdisplay(window_instance=win)
        present_ITI(window_instance=win)

# Funktion für Test-Block
def test_block(win):
    present_text(window_instance=win,
                 instr_text='Test-Block: In diesem Durchgang können Sie das Experiment üben. Die Daten werden nicht gespeichert. \n\n  '
                 'Bitte drücken Sie die Leertaste, um fortzufahren...')
    practice_trials(win, trial_num_test_block)

# Funktion für einen einzelnen Durchgang
def single_trial(win, 
                 image_list):
    draw_fixation(window_instance=win)
    img_input = random.choice(image_list)
    present_img(window_instance=win, 
                img_input=img_input)
    Suchdisplay(window_instance=win)
    present_ITI(window_instance=win)

def neutral_trial(win,
                  neutral_list):
    draw_fixation(window_instance=win)
    img_input = random.choice(neutral_list)
    present_img(window_instance=win,
                img_input=img_input)
    Suchdisplay(window_instance=win)
    present_ITI(window_instance=win)

# Funktion für Spinnen Blöcke
def block_experiment(win, 
                     image_list, 
                     num_trials):
    for _ in range(num_trials):
        single_trial(win, image_list)

#Funktion für neutrale Blöcke
def block_neutral(win,
                  neutral_list,
                  num_trials):
    for _ in range(num_trials):
        neutral_trial(win, neutral_list)

# Funktion für das gesamte Experiment
def start_experiment(win, 
                     instruction_dict, 
                     train_list, 
                     image_list,
                     neutral_list, 
                     trial_num, 
                     block_num_1,
                     block_num_2):
    # Anweisungen anzeigen
    for instruction_text in instruction_dict.values():
        present_text(window_instance=win, 
                     instr_text=instruction_text)

    # Probedurchgänge durchführen
    practice_trials(win, 
                    train_list)

    # Spinnenblöcke starten
    for block in range(block_num_1):
        present_text(window_instance=win, 
                     instr_text=f'Starte Block Nummer: {block + 1}\n\n Drücken Sie die Leertaste um zu beginnen.')
        block_experiment(win, 
                         image_list,
                         trial_num)
    
    #Neutrale Blöcke
    for block in range(block_num_2):
        present_text(window_instance=win,
                     instr_text=f'Starte Block Nummer: {block + 3}\n\n Drücken Sie die Leertaste um zu beginnen.')  #Zahl verändern, je nachdem wie viele Blöcke wir davor haben
        block_neutral(win,
                      neutral_list,
                      trial_num)

    # Abschluss
    present_text(window_instance=win, 
                 instr_text='Das Experiment ist beendet. Vielen Dank für Ihre Teilnahme!')

# Experiment starten
start_experiment(win=win, 
                 instruction_dict=instructions,
                 train_list=train_list,
                 image_list=img_list,
                 neutral_list=neutral_list, 
                 trial_num=trial_num, 
                 block_num_1=block_num_1,
                 block_num_2=block_num_2)

#Experiment beenden



#Einfügen:
# - Daten abspeichern
# - Dialogfenster für Probandendaten
# - class für VPs
# - Probetrials -> andere Spinnenbilder, brauchen wir überhaupt Bilder? -> eher neutrale Bilder
# - mehr Bilder! (v.a. Spinnenbilder, aber auch noch mehr Bäume)
# - Block- und Trial-Anzahl verändern
# - wie viele Probedurchgänge? -> Literatur nachlesen
# - Reihenfolge erst Spinnenbilder und dann neutrale Bilder
# - wie lange Präsentationszeit für Fixationskreuz und Bilder?

# Literatur:
    #wie viele Probetrials?
    #wie viele Blöcke und trials?
    #Präsentationsdauer Fixationskreuz und Bilder?
    #welche Reihenfolge der Bilder?
