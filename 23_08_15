#Versuch Datenspeicherung_23_08_11

#Experiment
# Anna Caprita, Deborah Gut, Leonie Orlikowski, Christin Sobotta, Mette Trettin

import os
import glob
from psychopy import gui, core, visual, event
import random
import pandas as pd

# orientation= 0
# stimulus = 0 

# Experimentkonfiguration
img_dir = os.getcwd() + '/Stimuli/Spinnenbilder/'     #hier eigene Ordnerstruktur einfügen und Bilder in diesem Ordner gespeichert haben
img_list = glob.glob(img_dir + '*.jpg')

neutral_img_dir = os.getcwd() + '/Stimuli/Neutrale_Bilder/'    #Bilder verändern im Ordner, eigene Ordnerstruktur einfügen
neutral_list = glob.glob(neutral_img_dir + '*.jpg')

train_img_dir = os.getcwd() + '/Stimuli/Trainingsbilder/'      #hier ebensfalls eigene Ordnerstruktur einfügen (wie oben)
train_list = glob.glob(train_img_dir + '*.jpg')    #train_img_list
#train_list = os.listdir(train_img_dir)

max_train_trials = 3 #len(train_list)    #Länge verändern
max_trials = 3 # len(img_list)      #Länge verändern
# max_blocks = 2   #Zahl verändern
block_num_1 = 1   #Zahl verändern
block_num_2 = 1   #Zahl verändern
block_num_test = 1
trial_num = 5   #Zahl verändern
trial_num_test_block = 3    #Zahl verändern ->

#leere Listen für die Datenerfassung erstellen
reactiontime_list = []
accuracy_list = []
orientation_list = []
stimulus_list = []
keypress_list = []
trial_number_list = []
block_number_list = []


# Supervisor input
supervisor_input = gui.Dlg(title='Probanden-Daten', pos=(0, 0))
supervisor_input.addText('Bitte folgende Daten von Versuchsperson erfragen:')
supervisor_input.addField('Probanden-ID:')
supervisor_input.addField('Alter:')
supervisor_input.addField('Brillenträger:', choices=['Ja', 'Nein'])
supervisor_input.addField('Testleiter:', choices=['AC', 'CS', 'DG', 'LO', 'MT'])
supervisor_input.addField('Geschlecht:', choices=['männlich', 'weiblich', 'divers'])
supervisor_input.show()

# Minimize the window temporarily to show the input dialog
#win.winHandle.minimize()
#supervisor_input.show()

# Restore the experiment window before continuing
#win.winHandle.maximize()

# Fenster erstellen
win = visual.Window(
    size=[1920, 1280],
    fullscr=True,
    color = 'white'
)

# Eingabe der Daten und Speicherung in subject data file
if supervisor_input.OK:
    participant_id = supervisor_input.data[0]
    age = supervisor_input.data[1]
    glasses = supervisor_input.data[2]
    testleiter = supervisor_input.data[3]
    geschlecht = supervisor_input.data[4]

    # Dateipfad modifizieren
    subject_file_path = os.getcwd() + '/Daten/subject_' + participant_id + '.tsv'
    subject_file_path2 = os.getcwd() + '/Daten/subject_' + participant_id + '.csv'

    # Datei für VP-Daten erstellen/laden
    if os.path.isfile(subject_file_path):
        subject_data = pd.read_csv(subject_file_path, delimiter='\t')
    else:
        subject_data = pd.DataFrame({'sub_id': [],
                                     'age': [],
                                     'sex': [],
                                     'glasses': [],
                                     'block': [],
                                     'trial': [],
                                     'reaction_time': [],
                                     'accuracy': [],        #sagt ob Richtung von L und Testendruck übereinstimmt
                                     'orientation': [],     #gibt an in welche Richtung  l gedreht ist
                                     'stimulus': [],        #gibt an ob spinnenbild oder neutrales Bild gezeigt wird
                                     'keypress':[]})        #gibt an welcher pfeil gedrückt wurde
        reaction_clock = core.Clock()

    # Antworten sammeln und zu subject data hinzufügen
    def collect_responses(sub_id, 
                          age,
                          sex, 
                          glasses,       #brauchen wir theoretisch nicht
                          block, 
                          trial, 
                          reaction_time, 
                          accuracy, 
                          keypress, 
                          orientation,
                          stimulus):
        print('Fragezeichen')
        print(sub_id)
        sub_id_list = [sub_id]*len(reaction_time)      #weiß nicht genau was das bedeutet, nochmal Nele fragen? Sonst auch egal
        print (sub_id_list)
        print('Fragezeichen_Ende')
        age_list = [age]*len(reaction_time)
        print( age_list)
        sex_list = [sex]*len(reaction_time)
        print( sex_list)
        glasses_list = [glasses]*len(reaction_time)
        print('Test2')
        print(glasses_list)
        print(accuracy_list)
        print(orientation_list)
        print(reactiontime_list)
        print(stimulus_list)
        print(keypress_list)
        print(trial_number_list)
        print(block_number_list)
        print('Test_drölfzig')
        

        data_dict = dict({'sub_id': sub_id_list,
                                     'age': age_list,
                                     'sex': sex_list,
                                     'glasses': glasses_list,
                                     'block': block,
                                     'trial': trial,
                                     'reaction_time': reaction_time,
                                     'accuracy': accuracy,
                                     'keypress': keypress,
                                     'orientation': orientation,
                                     'stimulus': stimulus})     

        print(data_dict)

        data = pd.DataFrame(dict([ (k,pd.Series(v)) for k,v in data_dict.items() ]))
        print(data)

        #sub_id_Series = pd.Series(sub_id_list)
        #print(sub_id_Series.size)
        #age_Series = pd.Series (age_list)
        #sex_Series = pd.Series (sex_list)
        #glasses_Series = pd.Series (glasses_list)
        #block_Series = pd.Series (block)
        #trial_Series = pd.Series (trial)
        #reaction_time_Series = pd.Series (reaction_time)
        #accuracy_Series = pd.Series (accuracy),
        #keypress_Series = pd.Series (keypress),
        #orientation_Series = pd.Series (orientation),
        #stimulus_Series = pd.Series (stimulus) 
                
        #original hier
        #data = pd.DataFrame({'sub_id': sub_id_list,
         #                            'age': age_list,
          #                           'sex': sex_list,
           #                          'glasses': glasses_list,
            #                         'block': block,
             #                        'trial': trial,
              #                       'reaction_time': reaction_time,
               #                      'accuracy': accuracy,
                #                     'keypress': keypress,
                 #                    'orientation': orientation,
                  #                   'stimulus': stimulus})

        print('test_abschluss')

        return data 
   
   # Beispieldaten   
   # sub_id = 2
   # block = 1
   #trial = 1
   # reaction_time = 0.5
   # accuracy = True
   # key_pressed = 'A'
   # orientation = 180
   # stimulus = 'Spinne'

   # trial_data = collect_responses(participant_id, 
   #                                age, 
   #                                geschlecht, 
   #                                glasses, 
   #                                reaction_time, 
   #                                accuracy,
   #                                key_pressed, 
   #                                orientation,
   #                                block, 
   #                                trial,
   #                                stimulus)
   # subject_data = pd.concat([subject_data, trial_data], 
   #                          ignore_index=True)

    # Daten nach Block und trial sortieren
    # subject_data = subject_data.sort_values(['block', 'trial']).reset_index(drop=True)

    # subject data in individuelles file speichern
   # subject_data.to_csv(subject_file_path, sep='\t', index=False, float_format='%.3f')

    # subject data aus individuellem file laden
   # loaded_data = pd.read_csv(subject_file_path, delimiter='\t')

    # Drucken der geladenen Daten
   # print(loaded_data)

else:
    print("Supervisor input canceled.")

#Instruktionen
instructions = {
    'instructions_1': 'Willkommen zu unserem Experiment. \n\n'
                     'Dieses Experiment findet im Rahmen des Experimentalpraktikums '
                     'des B.Sc. Psychologie an der Universität Magdeburg statt. \n\n'
                     'Bitte drücken Sie die Leertaste, um zu beginnen.',
    'instructions_2': 'In diesem Experiment werden Sie nach "L"s suchen.\n\n'
                      'In jedem Durchgang werden mehrere Buchstaben auf dem Display erscheinen.\n\n'
                      'Einer davon wird ein "L" sein, bei den anderen handelt es sich um "T"s.\n\n'
                      'Das L ist dabei entweder nach links oder nach rechts gedreht. \n\n'
                      'Sobald Sie das "L" finden, drücken Sie bitte so schnell wie möglich auf die Pfeiltaste, die mit der Richtung des "L"s übereinstimmt.\n\n'
                      'Wenn der waagerechte Balken also nach rechts zeigt, drücken Sie bitte die rechte Pfeiltaste. \n\n'
                      'Wenn der waagerechte Balken also nach links zeigt, drücken Sie bitte die linke Pfeiltaste. \n\n',
    'instructions_3': 'Das Ziel ist es, das "L" so schnell wie möglich zu finden.'
                      'Wenn Sie das "L" nach 10 Sekunden nicht gefunden haben, werden Sie automatisch zum nächsten Bildschirm weitergeleitet. \n\n'  #Zeit ändern?
                      'Zwischen den einzelnen Blöcken können Sie eine kurze Pause machen.\n\n'
                      'Bitte drücken Sie die Leertaste, um fortzufahren.',
    'instructions_4': 'Das Experiment besteht aus 10 Blöcken mit jeweils 20 Trials.\n\n'         #Zahlen ändern
                        'Zusätzlich werden zu Beginn einige Probedurchgänge durchgeführt.\n\n'
                        'Insgesamt dauert das Experiment ungefähr 20 Minuten.',                   #Zeit?
    'instructions_5': 'Falls Sie noch Fragen haben, wenden Sie sich gerne jetzt an die Versuchsleitung. '
                      'Sie haben jederzeit die Möglichkeit, das Experiment abzubrechen.\n\n'
                      'Viel Erfolg!\n\n'
                      'Bitte drücken Sie die Leertaste, um mit den Probedurchgängen zu beginnen.',
}

# experiment functions
def present_text(window_instance,
                 instr_text=':-)', #wird angezeigt, wenn kein anderer Text angegeben ist
                 text_size=0.06,     #war davor 0.075
                 text_position=(0., 0.),
                 color = 'black',
                 unit='norm',
                 continue_key='space'):
    
    text_stim = visual.TextStim(window_instance, 
                                height=text_size, 
                                color=color,
                                units=unit, 
                                pos=text_position)
    text_stim.setText(instr_text)
    text_stim.draw()
    window_instance.flip()
    event.waitKeys(keyList=[continue_key])

    #while True:                                                    #weiß nich genau was das ist?
     #   keys = event.getKeys(keyList=[continue_key, "escape"])
      #  if continue_key in keys:
       #     break
        #elif "escape" in keys:
         #   core.quit()

    return None

# present_text(instructions)

# Fixationskreuz definieren
def draw_fixation(window_instance,
                  fixation_position=(0., 0.)):
    
    fixation = visual.ShapeStim(window_instance,
                                pos=fixation_position,
                                vertices=((0, -0.025), (0, 0.025), (0,0), (-0.015,0), (0.015, 0)),
                                lineWidth=3,
                                closeShape=False,
                                lineColor='black')
    fixation.draw()
    window_instance.update()
    core.wait(1.0)

    return None

# draw_fixation(win)

#Bilder präsentieren
def present_img(window_instance,
                img_input,
                image_position=(0., 0.),
                #training=False,
                #continue_key='space'
                ):
    
    substring = 'Spinne'

    if substring in img_input:
        stimulus_list.append("spinne")
        print("spinne")
    elif not substring in img_input:
        stimulus_list.append("neutral")
        print("neutral")
            
   # if training == True:
    #    orientation = 0.0
    #else:
     #   orientation = 180.0
    
    image_stim = visual.ImageStim(window_instance,
                                  image=img_input,
                                  #ori=orientation,
                                  pos=image_position)
    image_stim.draw()
    window_instance.flip()  
    core.wait(1.0) 
    #event.waitKeys(keyList=[continue_key])
    
    return None

# stimulus = present_img
#orientation = random.choice([True, False])

def Suchdisplay(window_instance):
    # Stimuli erstellen
    orientation = random.choice([True, False])
    target_stimulus = visual.TextStim(window_instance, 
                                      text="L", 
                                      color="black", 
                                      flipHoriz=orientation,
                                      #flipHoriz=random.choice([True, False]), 
                                      units='pix',
                                      height=30)
    distractor_stimulus = visual.TextStim(window_instance, 
                                          text="T", 
                                          color="black", 
                                          units='pix',
                                          height=30)

    # Positionen der Stimuli definieren -> ursprüngliche Liste beibehalten
    randomlist = [
        (100, 0), (-100, 0), (0, 100), (0, -100), (70.71, 70.71), (-70.71, 70.71),
        (70.71, -70.71), (-70.71, -70.71), (200, 0), (173.2, 100), (100, 173.2),
        (0, 200), (-100, 173.2), (-173.2, 100), (-200, 0), (-173.2, -100),
        (-100, -173.2), (0, -200), (100, -173.2), (173.2, -100), (300, 0),
        (259.8, 150), (150, 259.8), (0, 300), (-150, 259.8), (-259.8, 150),
        (-300, 0), (-259.8, -150), (-150, -259.8), (0, -300), (150, -259.8),
        (259.8, -150), (400, 0), (346.41, 200), (200, 346.41), (0, 400),
        (-200, 346.41), (-346.41, 200), (-400, 0), (-346.41, -200),
        (-200, -346.41), (0, -400), (200, -346.41), (346.41, -200)
    ]

    # Jitter-Parameter für x- und y-Achse
    jitter_amount = 20

    # Verteile Distraktoren gleichmäßig auf die Quadranten
    distractors_per_quadrant = 20 // 4
    distractors_per_quadrant_list = [distractors_per_quadrant] * 4
    remaining_distractors = 20 - (distractors_per_quadrant * 4)

    for i in range(remaining_distractors):
        distractors_per_quadrant_list[i] += 1

    # Liste der Quadranten
    quadrants = [[], [], [], []]

    # Distraktoren auf Quadranten aufteilen
    for i in range(4):
        distractors = random.sample(randomlist, distractors_per_quadrant_list[i])
        quadrants[i] = distractors
        for distractor in distractors:
            randomlist.remove(distractor)

    # Stimuli anzeigen
    for i, quadrant in enumerate(quadrants):
        for position in quadrant:
            x, y = position
            jitter_x = random.uniform(-jitter_amount, jitter_amount)
            jitter_y = random.uniform(-jitter_amount, jitter_amount)
            x += jitter_x
            y += jitter_y
            distractor_stimulus.pos = (x, y)
            distractor_stimulus.draw()

    # Zufällige Position für das Zielstimulus auswählen
    target_position = random.choice(randomlist)
    target_stimulus.pos = target_position
    target_stimulus.draw()

    window_instance.flip()
    reactionclock = core.Clock()

    # Auf Tastendruck warten
    response = event.waitKeys(keyList=["left", "right", "escape"])  

    keypress = []
    #while True:
    #    keys = event.getKeys(keyList=["left", "right", "escape"])
    if "left" in response:
        reactiontime = reactionclock.getTime()
        reactiontime_list.append(reactiontime) 
        print(reactiontime)
        keypress = "links"
        keypress_list.append(keypress)
        print(keypress)
    elif "right" in response:
        reactiontime = reactionclock.getTime()
        reactiontime_list.append(reactiontime) 
        print(reactiontime)
        keypress = "rechts"
        keypress_list.append(keypress)
        print(keypress)
    elif "escape" in response:
        core.quit()
  
    if orientation == True:
        orientation_list.append("links")
    elif orientation == False:
        orientation_list.append("rechts")

    if (orientation == True and keypress == "links") or (orientation == False and keypress == 'rechts'):
        accuracy_list.append("richtig")
    else:
        accuracy_list.append("falsch")

        
    #    orientation_list.append("links")
    #    print(orientation)
    #    if keypress == "links":
    #        accuracy_list.append("richtig")
    #        # print(accuracy)
    #elif orientation == False:
    #    orientation_list.append("rechts")
    #    print(orientation)
    #    if keypress == "rechts":
    #        accuracy_list.append("falsch")
            # print(accuracy)

    return None

#timer = reactionclock
#timer.getTime()
# Aufruf der Funktion
# Suchdisplay()

#ITI definieren
def present_ITI(window_instance,  #ITI=Inter-Trial-Interval (Zeit zwischen zwei Trials)
                duration=0.5): #Dauer können wir noch überdenken
    window_instance.update()
    core.wait(duration)
    
    return None

# Funktion für Probedurchgänge
def practice_trials(win, 
                    train_list):
    for training_trial in train_list:
        draw_fixation(window_instance=win)
        present_img(window_instance=win, 
                    img_input=training_trial, 
                    # training=True
                    )
        Suchdisplay(window_instance=win)
        trial_number_list.append(trial_num)
        block_number_list.append(block_num_test)
        present_ITI(window_instance=win)

# Funktion für Test-Block
def test_block(win):
    present_text(window_instance=win,
                 instr_text='Test-Block: In diesem Durchgang können Sie das Experiment üben. Die Daten werden nicht gespeichert. \n\n  '
                 'Bitte drücken Sie die Leertaste, um fortzufahren...')
    practice_trials(win, trial_num_test_block)

# Funktion für einen einzelnen Durchgang
def single_trial(win, 
                 image_list):
    draw_fixation(window_instance=win)
    img_input = random.choice(image_list)
    present_img(window_instance=win, 
                img_input=img_input)
    Suchdisplay(window_instance=win)
    trial_number_list.append(trial_num)
    block_number_list.append(block_num_1)
    present_ITI(window_instance=win)

def neutral_trial(win,
                  neutral_list):
    draw_fixation(window_instance=win)
    img_input = random.choice(neutral_list)
    present_img(window_instance=win,
                img_input=img_input)
    Suchdisplay(window_instance=win)
    trial_number_list.append(trial_num)
    block_number_list.append(block_num_2)
    present_ITI(window_instance=win)

# Funktion für Spinnen Blöcke
def block_experiment(win, 
                     image_list, 
                     num_trials):
    for _ in range(num_trials):
        single_trial(win, image_list)

#Funktion für neutrale Blöcke
def block_neutral(win,
                  neutral_list,
                  num_trials):
    for _ in range(num_trials):
        neutral_trial(win, neutral_list)

# Funktion für das gesamte Experiment
def start_experiment(win, 
                     instruction_dict, 
                     train_list, 
                     image_list,
                     neutral_list, 
                     trial_num, 
                     block_num_1,
                     block_num_2):
    # Anweisungen anzeigen
    for instruction_text in instruction_dict.values():
        present_text(window_instance=win, 
                     instr_text=instruction_text)

    # Probedurchgänge durchführen
    practice_trials(win, 
                    train_list)

    # Spinnenblöcke starten
    for block in range(block_num_1):
        present_text(window_instance=win, 
                     instr_text=f'Starte Block Nummer: {block + 1}\n\n Drücken Sie die Leertaste um zu beginnen.')
        block_experiment(win, 
                         image_list,
                         trial_num)
    
    #Neutrale Blöcke
    for block in range(block_num_2):
        present_text(window_instance=win,
                     instr_text=f'Starte Block Nummer: {block + 3}\n\n Drücken Sie die Leertaste um zu beginnen.')  #Zahl verändern, je nachdem wie viele Blöcke wir davor haben
        block_neutral(win,
                      neutral_list,
                      trial_num)

    # Abschluss
    present_text(window_instance=win, 
                 instr_text='Das Experiment ist beendet. Vielen Dank für Ihre Teilnahme!')

# Experiment starten
start_experiment(win=win, 
                 instruction_dict=instructions,
                 train_list=train_list,
                 image_list=img_list,
                 neutral_list=neutral_list, 
                 trial_num=trial_num, 
                 block_num_1=block_num_1,
                 block_num_2=block_num_2)

print('TEST')
print(participant_id)
print(age)
print(geschlecht)
print(glasses)
print(trial_number_list)
print(block_number_list)
print(reactiontime_list)
print(accuracy_list)
print(keypress_list)
print(orientation_list)
print(stimulus_list)

#Datenspeicherung
trial_data = collect_responses(participant_id, 
                               age, 
                               geschlecht, 
                               glasses, 
                               block_number_list, 
                               trial_number_list,
                               reactiontime_list, 
                               accuracy_list,
                               keypress_list, 
                               orientation_list,
                               stimulus_list)
                            #participant_id, 
                             #  age, 
                             #  geschlecht, 
                             #  glasses,
                             #  reactiontime_list,
                             #  accuracy_list,
                             #  stimulus_list,
                             #  keypress_list,
                             #  orientation_list,
                             #  orientation = orientation,
                             #  stimulus = present_img                              



subject_data = pd.concat([subject_data, trial_data], ignore_index=True)

# Daten nach block und trial sortieren
#subject_data = subject_data.sort_values(['block', 'trial']).reset_index(drop=True)

#subject data zu individual participant file sortieren
subject_data.to_csv(subject_file_path, sep='\t', index=False, float_format='%.3f')
subject_data.to_csv(subject_file_path2, sep=';', index=False, float_format='%.3f')

#subject data aus dem individual participant file laden
loaded_data = pd.read_csv(subject_file_path, delimiter='\t')

#Access the loaded data
print(loaded_data)


#print(reactiontime_list)
#print(accuracy_list)
#print(orientation_list)
#print(stimulus_list)
#print(keypress_list)

#Experiment beenden



#Einfügen:
# - Daten abspeichern
# - Probetrials -> andere Spinnenbilder, brauchen wir überhaupt Bilder? -> eher neutrale Bilder
# - mehr Bilder! (v.a. Spinnenbilder, aber auch noch mehr Bäume)
# - Block- und Trial-Anzahl verändern
# - wie viele Probedurchgänge? -> Literatur nachlesen
# - Reihenfolge erst Spinnenbilder und dann neutrale Bilder
# - wie lange Präsentationszeit für Fixationskreuz und Bilder?
# - Bilder anpassen von der Größe her
# - Suchbildschirm L nach links

# Literatur:
    #wie viele Probetrials?
    #wie viele Blöcke und trials?
    #Präsentationsdauer Fixationskreuz und Bilder?
    #welche Reihenfolge der Bilder?
